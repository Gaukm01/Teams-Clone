{"ast":null,"code":"var _jsxFileName = \"/home/gauravk/Desktop/Teams_clone/client/src/SocketContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useState, useRef, useEffect } from 'react';\nimport { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SocketContext = /*#__PURE__*/createContext(); //const socket = io('http://localhost:5000');\n\nconst socket = io('https://video-chat-app-gk.herokuapp.com/'); //ContextProvider is the main function which returns all necessary details ( streams, ids etc.) of the connection.\n\nconst ContextProvider = ({\n  children\n}) => {\n  _s();\n\n  // intialization and [state,setState] = useState() keeps on updating returning function whenever setState is updated. \n  const [stream, setStream] = useState(); // get strem\n\n  const [me, setMe] = useState(''); // my details\n\n  const [call, setCall] = useState({}); // call details\n\n  const [callAccepted, setCallAccepted] = useState(false); // call accepted or not value\n\n  const [callEnded, setCallEnded] = useState(false); // call ended or not value\n\n  const [name, setName] = useState(''); // name\n\n  const myVideo = useRef();\n  const userVideo = useRef();\n  const connectionRef = useRef();\n  useEffect(() => {\n    /* for asking video and audio permision*/\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(currentStream => {\n      setStream(currentStream); // getting the video stream at myVideo.\n\n      myVideo.current.srcObject = currentStream;\n    }); // my details\n\n    socket.on('me', id => setMe(id)); // user (person on the 2nd end of connection) details.\n\n    socket.on('callUser', ({\n      from,\n      name: callerName,\n      signal\n    }) => {\n      setCall({\n        isReceivingCall: true,\n        from,\n        name: callerName,\n        signal\n      });\n    });\n  }, []);\n  /*different fucntions of our video call app*/\n\n  const answerCall = () => {\n    // if call acepted\n    setCallAccepted(true); // make a new webRTC peer connection.\n\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      //get caller details\n      socket.emit('answerCall', {\n        signal: data,\n        to: call.from\n      });\n    });\n    peer.on('stream', currentStream => {\n      // get user Video stream\n      userVideo.current.srcObject = currentStream;\n    });\n    peer.signal(call.signal);\n    connectionRef.current = peer; // to use peer for connection\n  }; // to make a call\n\n\n  const callUser = id => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream\n    });\n    peer.on('signal', data => {\n      socket.emit('callUser', {\n        userToCall: id,\n        signalData: data,\n        from: me,\n        name\n      });\n    });\n    peer.on('stream', currentStream => {\n      userVideo.current.srcObject = currentStream;\n    });\n    socket.on('callAccepted', signal => {\n      setCallAccepted(true);\n      peer.signal(signal);\n    }); // connection refrence\n\n    connectionRef.current = peer;\n  }; // to leave the call\n\n\n  const leaveCall = () => {\n    setCallEnded(true);\n    connectionRef.current.destroy();\n    window.location.reload();\n  };\n\n  return (\n    /*#__PURE__*/\n    // return all the components including functions and const defined.\n    _jsxDEV(SocketContext.Provider, {\n      value: {\n        call,\n        callAccepted,\n        userVideo,\n        myVideo,\n        name,\n        stream,\n        me,\n        callEnded,\n        setName,\n        callUser,\n        leaveCall,\n        answerCall\n      },\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)\n  );\n};\n\n_s(ContextProvider, \"tvJivSLoJ4YCfLyO6+/PGtv9cAE=\");\n\n_c = ContextProvider;\nexport { ContextProvider, SocketContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"sources":["/home/gauravk/Desktop/Teams_clone/client/src/SocketContext.js"],"names":["React","createContext","useState","useRef","useEffect","io","Peer","SocketContext","socket","ContextProvider","children","stream","setStream","me","setMe","call","setCall","callAccepted","setCallAccepted","callEnded","setCallEnded","name","setName","myVideo","userVideo","connectionRef","navigator","mediaDevices","getUserMedia","video","audio","then","currentStream","current","srcObject","on","id","from","callerName","signal","isReceivingCall","answerCall","peer","initiator","trickle","data","emit","to","callUser","userToCall","signalData","leaveCall","destroy","window","location","reload"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useRef, useEffect } from 'react';\nimport  { io } from 'socket.io-client';\nimport Peer from 'simple-peer';\n\nconst SocketContext = createContext();\n\n//const socket = io('http://localhost:5000');\nconst socket = io('https://video-chat-app-gk.herokuapp.com/');\n\n//ContextProvider is the main function which returns all necessary details ( streams, ids etc.) of the connection.\nconst ContextProvider = ({ children }) => {\n    // intialization and [state,setState] = useState() keeps on updating returning function whenever setState is updated. \n    const [stream, setStream] = useState(); // get strem\n    const [me, setMe] = useState(''); // my details\n    const [call, setCall] = useState({}); // call details\n    const [callAccepted, setCallAccepted] = useState(false); // call accepted or not value\n    const [callEnded, setCallEnded] = useState(false); // call ended or not value\n    const [name, setName] = useState(''); // name\n\n    const myVideo = useRef(); \n    const userVideo = useRef();\n    const connectionRef = useRef();\n\n    useEffect(() => {\n        /* for asking video and audio permision*/\n        navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n            .then((currentStream) => {\n                setStream(currentStream);\n                // getting the video stream at myVideo.\n                myVideo.current.srcObject = currentStream;\n            });\n        // my details\n        socket.on('me', (id) => setMe(id));\n        // user (person on the 2nd end of connection) details.\n        socket.on('callUser', ( {from, name: callerName, signal }) => {\n            setCall({isReceivingCall:true, from, name: callerName, signal})\n        });\n    }, []);\n\n    /*different fucntions of our video call app*/\n    const answerCall = () => {\n        // if call acepted\n        setCallAccepted(true);\n\n        // make a new webRTC peer connection.\n        const peer = new Peer({ initiator:false, trickle: false, stream });\n\n        peer.on('signal', (data) =>{\n            //get caller details\n            socket.emit('answerCall', {signal:data, to: call.from });\n        });\n\n        peer.on('stream', (currentStream) => {\n            // get user Video stream\n            userVideo.current.srcObject = currentStream;\n        });\n\n        peer.signal(call.signal);\n\n        connectionRef.current = peer; // to use peer for connection\n    };\n    \n    // to make a call\n    const callUser = (id) => {\n        \n        const peer = new Peer({ initiator:true, trickle: false, stream });\n\n        peer.on('signal', (data) => {\n            socket.emit('callUser', {userToCall: id, signalData: data, from: me, name });\n        });\n\n        peer.on('stream', (currentStream) => {\n            userVideo.current.srcObject = currentStream;\n        });\n\n        socket.on('callAccepted', (signal) => {\n            setCallAccepted(true);\n            peer.signal(signal);\n        });\n        // connection refrence\n        connectionRef.current = peer; \n    };\n\n    // to leave the call\n    const leaveCall = () => {\n        setCallEnded(true);\n\n        connectionRef.current.destroy();\n\n        window.location.reload();\n    };\n\n    return (\n        // return all the components including functions and const defined.\n        <SocketContext.Provider value= {{\n            call,\n            callAccepted,\n            userVideo,\n            myVideo,\n            name,\n            stream,\n            me,\n            callEnded,\n            setName,\n            callUser,\n            leaveCall,\n            answerCall,\n        }}\n        >\n\n            {children}\n        </SocketContext.Provider>\n    );\n};\n\nexport { ContextProvider, SocketContext };"]},"metadata":{},"sourceType":"module"}